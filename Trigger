Trigger that  check balance : 

CREATE OR REPLACE FUNCTION CheckMaxBalance()
RETURNS TRIGGER AS $$
DECLARE
    account_type_max_balance decimal;
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- Check if Account_balance exceeds Max_balance
        SELECT at.Max_balance INTO account_type_max_balance
        FROM Account_type at
        JOIN Accounts a ON at.Account_type_id = a.Accounttype_Account_type_id
        WHERE a.Account_id = NEW.Accounts_Account_id;

        IF (SELECT Account_balance + NEW.Trans_amount FROM Accounts WHERE Account_id = NEW.Accounts_Account_id) > account_type_max_balance THEN
            RAISE EXCEPTION 'Account balance exceeds maximum balance for the account type.';
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER CheckMaxBalanceTrigger
BEFORE INSERT ON Transactions
FOR EACH ROW
EXECUTE FUNCTION CheckMaxBalance();


Trigger that update the status of a transaction and the blance of the account after a transaction :

CREATE OR REPLACE FUNCTION UpdateTransactionStatusAndAccountBalance()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- Update Transaction status to 'Complete'
        UPDATE Transactions
        SET Trans_status = 'Complete'
        WHERE Transaction_id = NEW.Transaction_id;

        -- Update Account_balance
        UPDATE Accounts
        SET Account_balance = Account_balance + NEW.Trans_amount
        WHERE Account_id = NEW.Accounts_Account_id;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER UpdateTransactionStatusAndAccountBalanceTrigger
AFTER INSERT ON Transactions
FOR EACH ROW
EXECUTE FUNCTION UpdateTransactionStatusAndAccountBalance();


Trigger that update the purchase category column based on the value of the purchase description column : 

CREATE OR REPLACE FUNCTION UpdatePurchaseCategory()
RETURNS TRIGGER AS $$
BEGIN
	IF NEW.Purch_description ILIKE '%electronics%' or NEW.Purch_description ILIKE '%computer%' or NEW.Purch_description ILIKE '%smartphone%'  THEN
    	NEW.Purch_category := 'Electronics';
	ELSIF NEW.Purch_description ILIKE '%clothing%' THEN
    	NEW.Purch_category := 'Clothing';
	ELSIF NEW.Purch_description ILIKE '%car%' or NEW.Purch_description ILIKE '%transport%'  or NEW.Purch_description ILIKE '%plain%' or NEW.Purch_description ILIKE '%train%'THEN
    	NEW.Purch_category := 'Transport';    
	ELSIF NEW.Purch_description ILIKE '%food%'or NEW.Purch_description ILIKE '%coffee%' or NEW.Purch_description ILIKE '%groceries%' THEN
    	NEW.Purch_category := 'Daily';   		 
	ELSE
    	NEW.Purch_category := 'Other';
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER UpdatePurchaseCategoryTrigger
BEFORE INSERT ON Purchase_details
FOR EACH ROW
EXECUTE FUNCTION UpdatePurchaseCategory();
